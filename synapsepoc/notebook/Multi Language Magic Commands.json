{
	"name": "Multi Language Magic Commands",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ws1sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f3e38aaa-dd9c-4f17-95c1-ef3ff472da61/resourceGroups/dow_synapse_oneclick_v3_rg/providers/Microsoft.Synapse/workspaces/nwkgylqbzttuh456pocws1/bigDataPools/ws1sparkpool1",
				"name": "ws1sparkpool1",
				"type": "Spark",
				"endpoint": "https://nwkgylqbzttuh456pocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ws1sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 5,
				"cores": 8,
				"memory": 56
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create Spark DataFrame using PySpark\r\n",
					"Create a DataFrame from a list of tuples and create a local Spark view"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"new_rows = [('CA', 22, 45000), ('WA', 35, 65000), ('WA', 50, 85000)]\r\n",
					"demo_df = spark.createDataFrame(new_rows, ['State', 'Age', 'Salary'])\r\n",
					"demo_df.createOrReplaceTempView('demo_df')"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Query View using SQL"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM demo_df WHERE Age >30"
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create Spark DataFrame using C`#`\r\n",
					"Create Spark DataFrame from list of generic rows in C`#` and create a local Spark view\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "csharp"
					}
				},
				"source": [
					"%%csharp\r\n",
					"using Microsoft.Spark.Sql.Types;\r\n",
					"\r\n",
					"// List of GenericRow objects that contain the data for each row of the DataFrame\r\n",
					"var data = new List<GenericRow>();\r\n",
					"data.Add(new GenericRow(new object[] { \"MN\", 30, 59000 }));\r\n",
					"data.Add(new GenericRow(new object[] { \"WI\", 27, 48000 }));\r\n",
					"data.Add(new GenericRow(new object[] { \"IA\", 33, 52000 }));\r\n",
					"\r\n",
					"// Schema of the DataFrame\r\n",
					"var schema = new StructType(new List<StructField>()\r\n",
					"{\r\n",
					"    new StructField(\"State\", new StringType()),\r\n",
					"    new StructField(\"Age\", new IntegerType()),\r\n",
					"    new StructField(\"Salary\", new IntegerType())\r\n",
					"});\r\n",
					"\r\n",
					"// Calling CreateDataFrame with the data and schema\r\n",
					"DataFrame df = spark.CreateDataFrame(data, schema);\r\n",
					"\r\n",
					"// Displaying the returned dataframe\r\n",
					"df.Show();\r\n",
					"\r\n",
					"//Create temp view\r\n",
					"df.CreateOrReplaceTempView(\"demo_df_2\")"
				],
				"execution_count": 19
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Query New C`#` View using SQL"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM demo_df_2"
				],
				"execution_count": 20
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Load New View into Spark DataFrame with PySpark"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"demo_df_2 = spark.table('demo_df_2')\r\n",
					"display(demo_df_2)"
				],
				"execution_count": 21
			}
		]
	}
}